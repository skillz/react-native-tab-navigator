diff --git a/lib/commonjs/index.js b/lib/commonjs/index.js
index 744d033be48248329b9215ca9bd90186435e43bc..3ed3ce6fa14c7475a39b818873dd8c57a93b4abb 100644
--- a/lib/commonjs/index.js
+++ b/lib/commonjs/index.js
@@ -11,7 +11,7 @@ Object.defineProperty(exports, "OtpInputsRef", {
 });
 exports.default = void 0;
 
-var _clipboard = _interopRequireDefault(require("@react-native-clipboard/clipboard"));
+//var _clipboard = _interopRequireDefault(require("@react-native-clipboard/clipboard"));
 
 var _react = _interopRequireWildcard(require("react"));
 
@@ -52,6 +52,7 @@ const OtpInputs = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
     autoCapitalize = 'none',
     clearTextOnFocus = false,
     defaultValue,
+    filledStyles,
     focusStyles,
     handleChange = console.log,
     inputContainerStyles,
@@ -106,7 +107,7 @@ const OtpInputs = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
       });
       previousCopiedText.current = '';
 
-      _clipboard.default.setString('');
+     // _clipboard.default.setString('');
     },
     focus: () => {
       var _firstInput$current;
@@ -197,28 +198,28 @@ const OtpInputs = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
       }
     });
   }, [numberOfInputs]);
-  const listenOnCopiedText = (0, _react.useCallback)(async () => {
-    const copiedText = await _clipboard.default.getString();
-    const otpCodeValue = Object.values(otpCode).join('');
-
-    if ((copiedText === null || copiedText === void 0 ? void 0 : copiedText.length) === numberOfInputs && copiedText !== otpCodeValue && copiedText !== previousCopiedText.current) {
-      previousCopiedText.current = copiedText;
-      fillInputs(copiedText);
-    }
-  }, [fillInputs, numberOfInputs, otpCode]);
-  (0, _react.useEffect)(() => {
-    let interval;
-
-    if (autofillFromClipboard) {
-      interval = setInterval(() => {
-        listenOnCopiedText();
-      }, autofillListenerIntervalMS);
-    }
-
-    return () => {
-      clearInterval(interval);
-    };
-  }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);
+  // const listenOnCopiedText = (0, _react.useCallback)(async () => {
+  //   const copiedText = await _clipboard.default.getString();
+  //   const otpCodeValue = Object.values(otpCode).join('');
+
+  //   if ((copiedText === null || copiedText === void 0 ? void 0 : copiedText.length) === numberOfInputs && copiedText !== otpCodeValue && copiedText !== previousCopiedText.current) {
+  //     previousCopiedText.current = copiedText;
+  //     fillInputs(copiedText);
+  //   }
+  // }, [fillInputs, numberOfInputs, otpCode]);
+  // (0, _react.useEffect)(() => {
+  //   let interval;
+
+  //   if (autofillFromClipboard) {
+  //     interval = setInterval(() => {
+  //       listenOnCopiedText();
+  //     }, autofillListenerIntervalMS);
+  //   }
+
+  //   return () => {
+  //     clearInterval(interval);
+  //   };
+  // }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);
 
   const renderInputs = () => {
     const iterationArray = Array(numberOfInputs).fill(0);
diff --git a/lib/commonjs/index.js.map b/lib/commonjs/index.js.map
deleted file mode 100644
index d275561843cf0f1e36e33f0a8672be005682d65a..0000000000000000000000000000000000000000
--- a/lib/commonjs/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["supportAutofillFromClipboard","Platform","OS","parseInt","Version","styles","StyleSheet","create","container","alignItems","flex","flexDirection","justifyContent","OtpInputs","forwardRef","ref","autoFocus","autofillFromClipboard","autofillListenerIntervalMS","autoCapitalize","clearTextOnFocus","defaultValue","focusStyles","handleChange","console","log","inputContainerStyles","inputStyles","isRTL","keyboardType","numberOfInputs","placeholder","secureTextEntry","selectTextOnFocus","style","testIDPrefix","restProps","previousCopiedText","useRef","inputs","otpCode","hasKeySupport","dispatch","useReducer","reducer","fillOtpCode","useEffect","type","payload","code","useImperativeHandle","reset","current","forEach","input","clear","Clipboard","setString","focus","firstInput","handleInputTextChange","text","index","length","handleClearInput","Keyboard","dismiss","fillInputs","focusInput","handleTextChange","handleKeyPress","nativeEvent","key","isNaN","useCallback","inputIndex","listenOnCopiedText","copiedText","getString","otpCodeValue","Object","values","join","interval","setInterval","clearInterval","renderInputs","iterationArray","Array","fill","map","_","inputValue","React","createRef","keyPressEvent","select","android","ios"],"sources":["index.tsx"],"sourcesContent":["import Clipboard from '@react-native-clipboard/clipboard';\nimport React, {\n  forwardRef,\n  RefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  Keyboard,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { fillOtpCode } from './helpers';\nimport OtpInput from './OtpInput';\nimport reducer from './reducer';\nimport { OtpInputsRef, SupportedKeyboardType } from './types';\n\nconst supportAutofillFromClipboard =\n  Platform.OS === 'android' || parseInt(Platform.Version as string, 10) < 14;\n\ntype Props = TextInputProps & {\n  autofillFromClipboard: boolean;\n  autofillListenerIntervalMS?: number;\n  keyboardType?: SupportedKeyboardType;\n  style?: StyleProp<ViewStyle>;\n  focusStyles?: StyleProp<ViewStyle>;\n  defaultValue?: string;\n  handleChange: (otpCode: string) => void;\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  isRTL?: boolean;\n  numberOfInputs: number;\n  testIDPrefix?: string;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n});\n\nconst OtpInputs = forwardRef<OtpInputsRef, Props>(\n  (\n    {\n      autoFocus,\n      autofillFromClipboard = supportAutofillFromClipboard,\n      autofillListenerIntervalMS = 1000,\n      autoCapitalize = 'none',\n      clearTextOnFocus = false,\n      defaultValue,\n      focusStyles,\n      handleChange = console.log,\n      inputContainerStyles,\n      inputStyles,\n      isRTL = false,\n      keyboardType = 'phone-pad',\n      numberOfInputs = 4,\n      placeholder = '',\n      secureTextEntry = false,\n      selectTextOnFocus = true,\n      style,\n      testIDPrefix = 'otpInput',\n      ...restProps\n    },\n    ref,\n  ) => {\n    const previousCopiedText = useRef<string>('');\n    const inputs = useRef<Array<RefObject<TextInput>>>([]);\n    const [{ otpCode, hasKeySupport }, dispatch] = useReducer(reducer, {}, () => ({\n      otpCode: fillOtpCode(numberOfInputs, defaultValue),\n      handleChange,\n      hasKeySupport: Platform.OS === 'ios',\n    }));\n\n    useEffect(() => {\n      if (defaultValue) {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code: defaultValue },\n        });\n      }\n    }, [defaultValue, numberOfInputs]);\n\n    useEffect(() => {\n      dispatch({ type: 'setHandleChange', payload: handleChange });\n    }, [handleChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        reset: (): void => {\n          dispatch({ type: 'clearOtp', payload: numberOfInputs });\n          inputs.current.forEach((input) => input?.current?.clear());\n          previousCopiedText.current = '';\n          Clipboard.setString('');\n        },\n        focus: (): void => {\n          const firstInput = inputs.current[0];\n          firstInput?.current?.focus();\n        },\n      }),\n      [numberOfInputs],\n    );\n\n    const handleInputTextChange = (text: string, index: number): void => {\n      if (!text.length) {\n        handleClearInput(index);\n      }\n\n      if (text.length > 1) {\n        handleClearInput(index);\n        Keyboard.dismiss();\n        return fillInputs(text);\n      }\n\n      if (text) {\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            text,\n            index,\n          },\n        });\n        focusInput(index + 1);\n      }\n\n      if (index === numberOfInputs - 1 && text) {\n        Keyboard.dismiss();\n      }\n    };\n\n    const handleTextChange = (text: string, index: number) => {\n      if (\n        (Platform.OS === 'android' && !hasKeySupport) ||\n        // Pasted from input accessory\n        (Platform.OS === 'ios' && text.length > 1)\n      ) {\n        handleInputTextChange(text, index);\n      }\n    };\n\n    const handleKeyPress = (\n      { nativeEvent: { key } }: NativeSyntheticEvent<TextInputKeyPressEventData>,\n      index: number,\n    ) => {\n      const text = key === 'Backspace' || key.length > 1 ? '' : key;\n      handleInputTextChange(text, index);\n\n      if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key)))\n        dispatch({ type: 'setHasKeySupport', payload: true });\n    };\n\n    const focusInput = useCallback(\n      (index: number): void => {\n        if (index >= 0 && index < numberOfInputs) {\n          const input = inputs.current[index];\n          input?.current?.focus();\n        }\n      },\n      [numberOfInputs],\n    );\n\n    const handleClearInput = useCallback(\n      (inputIndex: number) => {\n        const input = inputs.current[inputIndex];\n        input?.current?.clear();\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            index: inputIndex,\n            text: '',\n          },\n        });\n        focusInput(inputIndex - 1);\n      },\n      [focusInput],\n    );\n\n    const fillInputs = useCallback(\n      (code: string) => {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code },\n        });\n      },\n      [numberOfInputs],\n    );\n\n    const listenOnCopiedText = useCallback(async (): Promise<void> => {\n      const copiedText = await Clipboard.getString();\n      const otpCodeValue = Object.values(otpCode).join('');\n\n      if (\n        copiedText?.length === numberOfInputs &&\n        copiedText !== otpCodeValue &&\n        copiedText !== previousCopiedText.current\n      ) {\n        previousCopiedText.current = copiedText;\n        fillInputs(copiedText);\n      }\n    }, [fillInputs, numberOfInputs, otpCode]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (autofillFromClipboard) {\n        interval = setInterval(() => {\n          listenOnCopiedText();\n        }, autofillListenerIntervalMS);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);\n\n    const renderInputs = (): Array<JSX.Element> => {\n      const iterationArray = Array<number>(numberOfInputs).fill(0);\n\n      return iterationArray.map((_, index) => {\n        let inputIndex = index;\n        if (isRTL) {\n          inputIndex = numberOfInputs - 1 - index;\n        }\n        const inputValue = otpCode[`${inputIndex}`];\n\n        if (!inputs.current[inputIndex]) {\n          inputs.current[inputIndex] = React.createRef<TextInput>();\n        }\n\n        return (\n          <OtpInput\n            accessible\n            accessibilityLabel={`${testIDPrefix}-${inputIndex}`}\n            autoCapitalize={autoCapitalize}\n            autoFocus={index === 0 && autoFocus}\n            clearTextOnFocus={clearTextOnFocus}\n            firstInput={index === 0}\n            focusStyles={focusStyles}\n            handleKeyPress={(keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>) =>\n              handleKeyPress(keyPressEvent, inputIndex)\n            }\n            handleTextChange={(text: string) => handleTextChange(text, inputIndex)}\n            inputContainerStyles={inputContainerStyles}\n            inputStyles={inputStyles}\n            inputValue={inputValue}\n            key={inputIndex}\n            keyboardType={keyboardType}\n            maxLength={Platform.select({\n              android: 1,\n              ios: index === 0 ? numberOfInputs : 1,\n            })}\n            numberOfInputs={numberOfInputs}\n            placeholder={placeholder}\n            ref={inputs.current[inputIndex]}\n            secureTextEntry={secureTextEntry}\n            selectTextOnFocus={selectTextOnFocus}\n            testID={`${testIDPrefix}-${inputIndex}`}\n            {...restProps}\n          />\n        );\n      });\n    };\n\n    // @ts-expect-error\n    return <View style={style || styles.container}>{renderInputs()}</View>;\n  },\n);\n\nexport { OtpInputsRef };\nexport default OtpInputs;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/lib/typescript/index.d.ts b/lib/typescript/index.d.ts
index 088b48a03796f0319348513a735f69ec9d2156b2..4d67228bbb4a91e2d09cb0b7fcf0c848e4e6085f 100644
--- a/lib/typescript/index.d.ts
+++ b/lib/typescript/index.d.ts
@@ -6,6 +6,7 @@ declare const OtpInputs: React.ForwardRefExoticComponent<TextInputProps & {
     autofillListenerIntervalMS?: number | undefined;
     keyboardType?: SupportedKeyboardType;
     style?: StyleProp<ViewStyle>;
+    filledStyles?: StyleProp<ViewStyle>;
     focusStyles?: StyleProp<ViewStyle>;
     defaultValue?: string | undefined;
     handleChange: (otpCode: string) => void;
diff --git a/package.json b/package.json
index 69b973a0364a0c98233e5b96969ebdaeaf533edb..9b5bb78c42a69099a95e579cae00a986dc3b4d42 100644
--- a/package.json
+++ b/package.json
@@ -5,7 +5,33 @@
   "main": "lib/commonjs/index.js",
   "module": "lib/module/index.js",
   "types": "lib/typescript/index.d.ts",
-  "react-native": "src/index.tsx",
+  "react-native": {
+    "lib/commonjs/index.js": "src/index.tsx",
+    "zlib": "browserify-zlib",
+    "console": "console-browserify",
+    "constants": "constants-browserify",
+    "crypto": "react-native-crypto",
+    "dns": "dns.js",
+    "net": "react-native-tcp",
+    "domain": "domain-browser",
+    "http": "@tradle/react-native-http",
+    "https": "https-browserify",
+    "os": "react-native-os",
+    "path": "path-browserify",
+    "querystring": "querystring-es3",
+    "fs": "react-native-level-fs",
+    "_stream_transform": "readable-stream/transform",
+    "_stream_readable": "readable-stream/readable",
+    "_stream_writable": "readable-stream/writable",
+    "_stream_duplex": "readable-stream/duplex",
+    "_stream_passthrough": "readable-stream/passthrough",
+    "dgram": "react-native-udp",
+    "stream": "stream-browserify",
+    "timers": "timers-browserify",
+    "tty": "tty-browserify",
+    "vm": "vm-browserify",
+    "tls": false
+  },
   "files": [
     "src",
     "lib"
@@ -120,5 +146,32 @@
         }
       ]
     ]
+  },
+  "browser": {
+    "lib/commonjs/index.js": "src/index.tsx",
+    "zlib": "browserify-zlib",
+    "console": "console-browserify",
+    "constants": "constants-browserify",
+    "crypto": "react-native-crypto",
+    "dns": "dns.js",
+    "net": "react-native-tcp",
+    "domain": "domain-browser",
+    "http": "@tradle/react-native-http",
+    "https": "https-browserify",
+    "os": "react-native-os",
+    "path": "path-browserify",
+    "querystring": "querystring-es3",
+    "fs": "react-native-level-fs",
+    "_stream_transform": "readable-stream/transform",
+    "_stream_readable": "readable-stream/readable",
+    "_stream_writable": "readable-stream/writable",
+    "_stream_duplex": "readable-stream/duplex",
+    "_stream_passthrough": "readable-stream/passthrough",
+    "dgram": "react-native-udp",
+    "stream": "stream-browserify",
+    "timers": "timers-browserify",
+    "tty": "tty-browserify",
+    "vm": "vm-browserify",
+    "tls": false
   }
 }
diff --git a/src/index.tsx b/src/index.tsx
index 7fd9e454ee29e904c13ea12829602dec9bdb6acb..d9160248aec552f0f51d4a62e7af0ec36dc88034 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -1,4 +1,4 @@
-import Clipboard from '@react-native-clipboard/clipboard';
+//import Clipboard from '@react-native-clipboard/clipboard';
 import React, {
   forwardRef,
   RefObject,
@@ -7,6 +7,7 @@ import React, {
   useImperativeHandle,
   useReducer,
   useRef,
+  useState
 } from 'react';
 import {
   Keyboard,
@@ -36,6 +37,7 @@ type Props = TextInputProps & {
   keyboardType?: SupportedKeyboardType;
   style?: StyleProp<ViewStyle>;
   focusStyles?: StyleProp<ViewStyle>;
+  filledStyles?: StyleProp<ViewStyle>;
   defaultValue?: string;
   handleChange: (otpCode: string) => void;
   inputContainerStyles?: StyleProp<ViewStyle>;
@@ -63,6 +65,7 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
       autoCapitalize = 'none',
       clearTextOnFocus = false,
       defaultValue,
+      filledStyles,
       focusStyles,
       handleChange = console.log,
       inputContainerStyles,
@@ -81,6 +84,8 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
   ) => {
     const previousCopiedText = useRef<string>('');
     const inputs = useRef<Array<RefObject<TextInput>>>([]);
+    const defaultInputValues =new Array(numberOfInputs).fill(false);
+    const [inputValues,setInputValues] = useState([...defaultInputValues]);
     const [{ otpCode, hasKeySupport }, dispatch] = useReducer(reducer, {}, () => ({
       otpCode: fillOtpCode(numberOfInputs, defaultValue),
       handleChange,
@@ -99,7 +104,7 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
     useEffect(() => {
       dispatch({ type: 'setHandleChange', payload: handleChange });
     }, [handleChange]);
-
+    
     useImperativeHandle(
       ref,
       () => ({
@@ -107,7 +112,7 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
           dispatch({ type: 'clearOtp', payload: numberOfInputs });
           inputs.current.forEach((input) => input?.current?.clear());
           previousCopiedText.current = '';
-          Clipboard.setString('');
+         //Clipboard.setString('');
         },
         focus: (): void => {
           const firstInput = inputs.current[0];
@@ -118,8 +123,12 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
     );
 
     const handleInputTextChange = (text: string, index: number): void => {
+
       if (!text.length) {
         handleClearInput(index);
+        const temp = [...inputValues];
+        temp[index] = false;
+        setInputValues(temp);
       }
 
       if (text.length > 1) {
@@ -136,6 +145,10 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
             index,
           },
         });
+
+        const temp = [...inputValues];
+        temp[index] = true;
+        setInputValues(temp);
         focusInput(index + 1);
       }
 
@@ -201,33 +214,35 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
       [numberOfInputs],
     );
 
-    const listenOnCopiedText = useCallback(async (): Promise<void> => {
-      const copiedText = await Clipboard.getString();
-      const otpCodeValue = Object.values(otpCode).join('');
+    // const listenOnCopiedText = useCallback(async (): Promise<void> => {
+    //   //const copiedText = await Clipboard.getString(); //
+    //   const otpCodeValue = Object.values(otpCode).join('');
 
-      if (
-        copiedText?.length === numberOfInputs &&
-        copiedText !== otpCodeValue &&
-        copiedText !== previousCopiedText.current
-      ) {
-        previousCopiedText.current = copiedText;
-        fillInputs(copiedText);
-      }
-    }, [fillInputs, numberOfInputs, otpCode]);
+    //   if (
+    //     copiedText?.length === numberOfInputs &&
+    //     copiedText !== otpCodeValue &&
+    //     copiedText !== previousCopiedText.current
+    //   ) {
+    //     previousCopiedText.current = copiedText;
+    //     const temp = inputValues.map(()=>true)
+    //     setInputValues(temp);
+    //     fillInputs(copiedText);
+    //   }
+    // }, [fillInputs, numberOfInputs, otpCode]);
 
-    useEffect(() => {
-      let interval: NodeJS.Timeout;
+    // useEffect(() => {
+    //   let interval: NodeJS.Timeout;
 
-      if (autofillFromClipboard) {
-        interval = setInterval(() => {
-          listenOnCopiedText();
-        }, autofillListenerIntervalMS);
-      }
+    //   if (autofillFromClipboard) {
+    //     interval = setInterval(() => {
+    //       listenOnCopiedText();
+    //     }, autofillListenerIntervalMS);
+    //   }
 
-      return () => {
-        clearInterval(interval);
-      };
-    }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);
+    //   return () => {
+    //     clearInterval(interval);
+    //   };
+    // }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);
 
     const renderInputs = (): Array<JSX.Element> => {
       const iterationArray = Array<number>(numberOfInputs).fill(0);
@@ -256,16 +271,18 @@ const OtpInputs = forwardRef<OtpInputsRef, Props>(
               handleKeyPress(keyPressEvent, inputIndex)
             }
             handleTextChange={(text: string) => handleTextChange(text, inputIndex)}
-            inputContainerStyles={inputContainerStyles}
+            inputContainerStyles={[inputContainerStyles,inputValues[index]? filledStyles: null]}
             inputStyles={inputStyles}
             inputValue={inputValue}
             key={inputIndex}
             keyboardType={keyboardType}
             maxLength={Platform.select({
-              android: 1,
+              android: index === 0 ? numberOfInputs : 1,
               ios: index === 0 ? numberOfInputs : 1,
             })}
             numberOfInputs={numberOfInputs}
+            onPressIn={()=>{}}
+            onPressOut={()=>{}}
             placeholder={placeholder}
             ref={inputs.current[inputIndex]}
             secureTextEntry={secureTextEntry}
